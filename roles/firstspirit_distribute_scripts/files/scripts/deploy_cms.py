#!/usr/bin/env python3

# Used to deploy files generated by FirstSpirit to their respective destinations
# Takes 4 Arguments:
# * src -> the directory containing the generated Files
# * fairIdentifier -> the fairIdentifier the files belong to
# * targetEnv -> the environment to deploy into -> see als env.py
# * is_delta -> is this a delta or partly generation, or a complete/full generation

# Example:
# ./deploy_cms.py /opt/firstspirit5/web/fs5staging/669985/670023/ whitelabel dev true

import env
import solr_connector

import os
import time
import subprocess
import sys
import distutils.util

print("Running deploy_cms script")

_, src, fairIdentifier, targetEnv, is_delta, *_ = sys.argv

print("src: ", src)
print("fairIdentifier: ", fairIdentifier)
print("targetEnv: ", targetEnv)
print("isDelta?:", is_delta)

is_delta = distutils.util.strtobool(is_delta)

target = env.environments[targetEnv]
user = target["user"]


print("\n\n\n")
print("deploy content to app servers", target["app-servers"])
print("\n\n\n")

for server in target["app-servers"]:
    target_full = user + "@" + server + "::" + target["app-rsync-module"] + "/" + fairIdentifier
    print("Deploy content from " + src + " to " + target_full + "\n")

    rsync_command = ["rsync",
            "-rchzvl",
            # set permissions explicitely as FirstSpirit to ensure all required access
            "--no-perms",
            "--chmod=D2775,F664",
            "--exclude=/media",
            "--exclude=/de/datasources",
            "--exclude=/en/datasources",
            src,
            target_full]

    if not is_delta:
        rsync_command.insert(1, "--delete")

    print("running: ", rsync_command)
    subprocess.run(rsync_command, check=True)


print("\n\n\n")
print("deploy media to file servers", target["file-servers"])
print("\n\n\n")

media_src = src + "/media"

for server in target["file-servers"]:
    target_full = user + "@" + server + "::" + target["fileserver-rsync-module"] + "/" + fairIdentifier
    print("Deploy content from " + media_src + " to " + target_full + "\n")
    rsync_command = ["rsync",
            "-rchzvl",
            # set permissions explicitely as FirstSpirit to ensure all required access
            "--no-perms",
            "--chmod=D2775,F664",
            media_src,
            target_full]

    if not is_delta:
        rsync_command.insert(1, "--delete")

    print("running: ", rsync_command)
    subprocess.run(rsync_command, check=True)


solr_indexer = target["solr-indexer"]

print("\n\n\n")
print("deploy content to solr indexer", solr_indexer["server"])
print("\n\n\n")

# Using temp log file to log updated/deleted files
# This info will be exctracted from the log and pushed to the solr indexer for efficient delta indexing
rsync_log_file = "/tmp/rsync_log_" + fairIdentifier + "_" + str(time.time())

solr_target_full = solr_indexer["user"] + "@" + solr_indexer["server"] + "::" + solr_indexer["content-module"] + "/" + fairIdentifier

rsync_command = ["rsync",
        "-rchzvl",
        # single quotes and # are expected in solr_connector.extract_indexing_data
        "--log-file-format='#%o %n'",
        "--log-file=" + rsync_log_file,
        "--exclude=/media",
        "--exclude=/de/datasources",
        "--exclude=/en/datasources",
        src,
        solr_target_full]

if not is_delta:
    rsync_command.insert(1, "--delete")

print("running: ", rsync_command)
subprocess.run(rsync_command, check=True)

indexing_data = solr_connector.extract_indexing_data(rsync_log_file)
indexing_data["fairIdentifier"] = fairIdentifier

# remove temp log file
subprocess.run(["rm", "-f", rsync_log_file], check=False)

print("Trigger Solr-Indexer for Content:")
print(indexing_data)

solr_connector.trigger_indexer_with_post(indexing_data, solr_indexer["content-endpoint"])


print("\n\n\n")
print("deploy datasources to solr indexer", solr_indexer["server"])
print("\n\n\n")

# Using temp log file to log updated/deleted files
# This info will be exctracted from the log and pushed to the solr indexer for efficient delta indexing
rsync_log_file = "/tmp/rsync_log_" + fairIdentifier + "_" + str(time.time())

solr_target_full = solr_indexer["user"] + "@" + solr_indexer["server"] + "::" + solr_indexer["datasources-module"] + "/" + fairIdentifier

rsync_command = ["rsync",
        "-rchzvl",
        # only transfer the nested datasources files
        "--include=de",
        "--include=en",
        "--include=datasources/***",
        "--exclude=*",

        src,
        solr_target_full]

if not is_delta:
    rsync_command.insert(1, "--delete")

print("running: ", rsync_command)
subprocess.run(rsync_command, check=True)

print("Trigger Solr-Indexer for Content:")

solr_connector.trigger_indexer_with_get(solr_indexer["datasources-endpoint"], fairIdentifier)
